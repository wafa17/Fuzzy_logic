# -*- coding: utf-8 -*-
"""Tupro3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n9MfLxT0p7_Xd78tA3D1zmHl6HwDKC8J
"""

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import math
import csv

from google.colab import files
uploaded = files.upload()

"""**BACA FILE CSV**"""

datainfluencer = pd.read_csv('influencers.csv')
display(datainfluencer)

def readdata():
  results = []
  i = 0
  header = []
  with open("influencers.csv") as csvfile:
      reader = csv.reader(csvfile) # change contents to floats
      for row in reader: # each row is a list
        if i == 0:
          data = [row[0],row[1],row[2]]
          header.append(data)
          i = 1
        else:
          data = [row[0],float(row[1]),float(row[2])]
          results.append(data)
  
  return results
readdata()

"""**FUZZIFIKASI**"""

def folHigh (x):
  if (x>70000):
    return 1
  elif (x<=55000):
    return 0
  else:
    return ((x-55000)/(70000-55000))
  
def folMed(x):
  if (x<40000) and (x>=50000):
    return 1
  elif (x< 20000) or (x>70000):
    return 0
  elif ( x <= 40000):
    return (x-20000)/(40000-20000)
  elif (x>50000):
    return(70000-x)/(70000-50000)


def folLow (x):
  if (x<=20000):
    return 1
  elif (x>30000):
    return 0
  else:
    return (30000-x)/(30000-20000)

def grafikFol():
    fol = np.arange(0,100000)
    plt.plot(fol,[folHigh(x)for x in fol] , color='blue', label='High')
    plt.plot(fol, [folMed(x) for x in fol], color='green', label='Average')
    plt.plot(fol, [folLow(x) for x in fol], color='red', label='Low')
    plt.title('Grafik Follower')
    plt.legend()
    plt.show()
grafikFol()

def engrateHigh (y) :
  if (y>75):
    return 1
  elif (y<=50):
    return 0
  else:
    return (y-50)/(75-50)

def engrateMed (y):
  if (y>40)and(y<=50):
    return 1
  elif (y<=20) or (y>75):
    return 0
  elif (y>50):
    return (75-y)/(75-50)
  elif (y<=40):
    return (y-20)/(40-20)

def engrateLow(y):
  if (y<=20):
    return 1
  elif (y> 45):
    return 0
  else:
    return (45-y)/(45-20)

def grafikEngRate():
    engrate = np.arange(0,100)
    plt.plot(engrate, [engrateHigh(y)for y in engrate], color='blue', label='High')
    plt.plot(engrate, [engrateMed(y) for y in engrate], color='green', label='Average')
    plt.plot(engrate, [engrateLow(y) for y in engrate], color='red', label='Low')
    plt.title('Grafik Engagement Rate')
    plt.legend()
    plt.show()
grafikEngRate()

def inference(x,y):
    x,y = readdata()

    acc1 = min(folHigh(x),engrateHigh(y))
    acc2 = min(folHigh(x),engrateMed(y))
    acc3 = min(folMed(x),engrateHigh(y))
    acc4 = min(folLow(x),engrateHigh(y))
    den1 = min(folHigh(x),engrateLow(y))
    den2 = min(folMed(x),engrateLow(y))
    den4 = min(folLow(x),engrateLow(y))
    cons = min(folMed(x),engrateMed(y))
    
    acc = []
    acc.append(max(acc1,acc2,acc3,acc4))
    den = []
    den.append(max(den1,den2,den3))
    cons = []
    cons.append(max(cons))

    hasil = []
    hasil.append(acc)
    hasil.append(den)
    hasil.append(cons)
    conc = []
    conc.append(hasil)

    return conc

def defuzzifikasi():
  
  inf = inference(x,y)
  hasildef = []
  best =[]

  for i in range(len(inf)):
    hasil = (inf[i][0]*100)+(inf[i][1]*70)+(inf[i][0]*50)/(sum(inf[i]))
    hasildef.append(round(hasil),2)
  
  return hasildef